name: Test & Deploy to Raspberry Pi

on:
  push:
    branches: [master]

jobs:
  test:
    uses: ./.github/workflows/poetry-test.yml

  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Cloudflared
        run: |
          sudo mkdir -p --mode=0755 /usr/share/keyrings
          curl -fsSL https://pkg.cloudflare.com/cloudflare-main.gpg | sudo tee /usr/share/keyrings/cloudflare-main.gpg >/dev/null
          echo 'deb [signed-by=/usr/share/keyrings/cloudflare-main.gpg] https://pkg.cloudflare.com/cloudflared jammy main' | sudo tee /etc/apt/sources.list.d/cloudflared.list
          sudo apt-get update && sudo apt-get install cloudflared

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.RASPBERRY_PI_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" > ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          cat <<EOF > ~/.ssh/config
          Host ${{ secrets.CLOUDFLARE_TUNNEL_DOMAIN }}
            User ${{ secrets.RASPBERRY_PI_USERNAME }}
            IdentityFile ~/.ssh/id_ed25519
            ProxyCommand cloudflared access ssh --hostname %h
          EOF
          chmod 600 ~/.ssh/config
        shell: bash

      - name: Deploy via SSH
        run: |
          ssh -vvv -o StrictHostKeyChecking=no ${{ secrets.CLOUDFLARE_TUNNEL_DOMAIN }} "\
          eval \"\$(ssh-agent -s)\" && \
          ssh-add ~/.ssh/github && \
          cd ~/cockpit-api && \
          git pull && \
          echo "DB_USER='${{ secrets.DB_USER }}'" > .env && \
          echo "DB_PASSWORD='${{ secrets.DB_PASSWORD }}'" >> .env && \
          echo "DB_HOST='${{ secrets.DB_HOST }}'" >> .env && \
          echo "DB_NAME='${{ secrets.DB_NAME }}'" >> .env && \
          echo "DB_PORT='${{ secrets.DB_PORT }}'" >> .env && \
          echo "CORS_ORIGINS='${{ secrets.CORS_ORIGINS }}'" >> .env && \
          docker compose -f docker-compose.prod.yml down && \
          docker compose -f docker-compose.prod.yml build && \
          docker compose -f docker-compose.prod.yml up -d"

        shell: bash
